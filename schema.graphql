schema {
  query: _Query
  mutation: _Mutation
}

directive @strExpr(
  char: Char
  chars: [Char!]
  string: String
  strings: [String!]
  byte: Byte
  bytes: [Byte!]
  short: Short
  shorts: [Short!]
  int: Int
  ints: [Int!]
  long: Long
  longs: [Long!]
  float: _Float4
  floats: [_Float4!]
  double: Float
  doubles: [Float!]
  bigDecimal: BigDecimal
  bigDecimals: [BigDecimal!]
  date: _Date
  dates: [_Date!]
  dateTime: _DateTime
  dateTimes: [_DateTime!]
  offsetDateTime: _OffsetDateTime
  offsetDateTimes: [_OffsetDateTime!]
  time: _Time
  times: [_Time!]
  boolean: Boolean
  booleans: [Boolean!]
) on FIELD

directive @mergeReqSpec(cond: String) on INLINE_FRAGMENT

directive @dependsOnByGet(
  commandId: String!
  dependency: _DependsOnDependencyByGet!
) on FIELD

directive @dependsOnByUpdateOrCreate(
  commandId: String!
  dependency: _DependsOnDependencyByUpdateOrCreate!
) on FIELD

# java.math.BigDecimal
scalar BigDecimal

# Byte as Int
scalar Byte

# Char as Character
scalar Char

interface Depart {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  description: String
  name: String!
  type: String!
  currentManager: _G_EmployeeReference!
  parent: _G_DepartReference!
  _calc: _Calculation!
}

interface DepartTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  statusReasonForB: String
  type: String!
  statusForB(alias: String): Status
  departWorkPlanList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_DepartWorkPlan!
  depart: _G_DepartReference!
  _calc: _Calculation!
}

interface DepartWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  departTable(alias: String): DepartTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): DepartTable
  employee: _G_EmployeeReference!
  project: _G_ProjectReference!
  _calc: _Calculation!
}

interface Employee {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  currentBasicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  currentJobTitle(alias: String): JobTitle
  employeePositionList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeePosition!
  currentDepart: _G_DepartReference!
  person: _G_PersonReference!
  _calc: _Calculation!
}

interface EmployeePosition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  basicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  employee(alias: String): Employee!
  jobTitle(alias: String): JobTitle!
  aggregateRoot(alias: String): Employee
  depart: _G_DepartReference!
  _calc: _Calculation!
}

interface EmployeeTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  type: String!
  employeeWorkFactList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeeWorkFact!
  employee: _G_EmployeeReference!
  _calc: _Calculation!
}

interface EmployeeWorkFact {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  employeeTable(alias: String): EmployeeTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): EmployeeTable
  project: _G_ProjectReference!
  _calc: _Calculation!
}

interface JobTitle {
  id: ID!
  isDel: Boolean
  descr: String
  type: String!
  aggregateRoot(alias: String): RootDictionary
  jobTitleTypeList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_JobTitleType!
  _calc: _Calculation!
}

interface JobTitleType {
  id: ID!
  type: String!
  jobTitle(alias: String): JobTitle
  jobType(alias: String): JobType
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

interface JobType {
  id: ID!
  isDel: Boolean
  basicSum: BigDecimal
  isUnplanned: Boolean!
  name: String!
  type: String!
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

# Long type
scalar Long

interface Person {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  birthDate: _Date
  firstName: String!
  lastName: String!
  name: String
  patronymic: String
  type: String!
  _calc: _Calculation!
}

interface Project {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  isUnplanned: Boolean!
  name: String!
  projectSum: BigDecimal
  startDate: _Date!
  type: String!
  currentManager: _G_EmployeeReference!
  _calc: _Calculation!
}

interface ProjectTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  statusReasonForB: String
  type: String!
  statusForB(alias: String): Status
  projectWorkPlanList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_ProjectWorkPlan!
  project: _G_ProjectReference!
  _calc: _Calculation!
}

interface ProjectWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  projectTable(alias: String): ProjectTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): ProjectTable
  _calc: _Calculation!
}

interface RootDictionary {
  id: ID!
  type: String!
  _calc: _Calculation!
}

# Short as Int
scalar Short

interface Stakeholder {
  id: ID!
  chgCnt: Long
  code: String
  lastChangeDate: _DateTime
  name: String
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

interface Status {
  id: ID!
  chgCnt: Long
  code: String
  description: String
  initial: Boolean
  lastChangeDate: _DateTime
  name: String
  statusType: String
  stakeholder(alias: String): Stakeholder
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

interface StatusGraph {
  id: ID!
  chgCnt: Long
  code: String
  label: String
  lastChangeDate: _DateTime
  name: String
  statusFrom(alias: String): Status
  statusTo(alias: String): Status
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

interface SysAdminSettings {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  key: String
  value: String
  rootSecurity(alias: String): SysRootSecurity!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

interface SysCheckSelect {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  beforeCommitEnable: Boolean
  beforeOperationDisable: Boolean
  conditionValue: String
  description: String
  orderValue: Int
  typeName: String
  operation(alias: String): SysOperation!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

interface SysOperation {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  allowEmptyChecks: Boolean
  body: String
  disableJwtVerification: Boolean
  hashValue: String
  rootSecurity(alias: String): SysRootSecurity!
  aggregateRoot(alias: String): SysRootSecurity
  checkSelects(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysCheckSelect!
  paramAdditions(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysParamAddition!
  _calc: _Calculation!
}

interface SysParamAddition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  paramAddition: String
  paramName: String
  operation(alias: String): SysOperation!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

interface SysRootSecurity {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  adminSettings(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysAdminSettings!
  operations(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysOperation!
  _calc: _Calculation!
}

scalar _ByteArray

type _Calculation {
  char(expr: String!): Char
  string(expr: String!): String
  byte(expr: String!): Byte
  short(expr: String!): Short
  int(expr: String!): Int
  long(expr: String!): Long
  float(expr: String!): _Float4
  double(expr: String!): Float
  bigDecimal(expr: String!): BigDecimal
  date(expr: String!): _Date
  dateTime(expr: String!): _DateTime
  offsetDateTime(expr: String!): _OffsetDateTime
  time(expr: String!): _Time
  boolean(expr: String!): Boolean
  byteArray(expr: String!): _ByteArray
}

input _CompareDepartInput {
  name: String
  description: String
}

input _CompareDepartTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: String
  startDate: _Date
}

input _CompareDepartWorkPlanInput {
  period: String
  comment: String
}

input _CompareEmployeeInput {
  endDate: _Date
  startDate: _Date
}

input _CompareEmployeePositionInput {
  endDate: _Date
  startDate: _Date
}

input _CompareEmployeeTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  startDate: _Date
}

input _CompareEmployeeWorkFactInput {
  period: String
  comment: String
}

input _CompareJobTitleInput {
  descr: String
}

input _CompareJobTypeInput {
  name: String
}

input _ComparePersonInput {
  firstName: String
  lastName: String
  patronymic: String
  birthDate: _Date
}

input _CompareProjectInput {
  endDate: _Date
  name: String
  startDate: _Date
}

input _CompareProjectTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: String
  startDate: _Date
}

input _CompareProjectWorkPlanInput {
  period: String
  comment: String
}

input _CreateDepartInput {
  currentManager: _SingleReferenceInput
  parent: _SingleReferenceInput
  name: String!
  description: String
  id: ID!
}

input _CreateDepartTableInput {
  periodKind: _EN_PeriodKind!
  endDate: _Date
  statusForB: _StatusInput
  id: ID!
  depart: _SingleReferenceInput!
  startDate: _Date!
}

input _CreateDepartWorkPlanInput {
  val: BigDecimal!
  period: String!
  project: _SingleReferenceInput!
  comment: String
  jobType: ID!
  employee: _SingleReferenceInput!
  departTable: ID!
}

input _CreateEmployeeInput {
  currentBasicSum: BigDecimal!
  currentDepart: _SingleReferenceInput!
  endDate: _Date
  person: _SingleReferenceInput!
  currentJobTitle: ID
  id: ID
  startDate: _Date!
}

input _CreateEmployeePositionInput {
  endDate: _Date
  jobTitle: ID!
  employee: ID!
  depart: _SingleReferenceInput!
  startDate: _Date!
  basicSum: BigDecimal!
}

input _CreateEmployeeTableInput {
  periodKind: _EN_PeriodKind!
  endDate: _Date
  id: ID!
  employee: _SingleReferenceInput!
  startDate: _Date!
}

input _CreateEmployeeWorkFactInput {
  val: BigDecimal!
  period: String!
  employeeTable: ID!
  project: _SingleReferenceInput!
  comment: String
  jobType: ID!
}

input _CreateJobTitleInput {
  descr: String
  id: ID!
  isDel: Boolean
}

input _CreateJobTitleTypeInput {
  jobTitle: ID
  id: ID!
  jobType: ID
}

input _CreateJobTypeInput {
  isUnplanned: Boolean!
  name: String!
  id: ID!
  isDel: Boolean
  basicSum: BigDecimal
}

input _CreatePersonInput {
  firstName: String!
  lastName: String!
  patronymic: String
  id: ID!
  birthDate: _Date
}

input _CreateProjectInput {
  currentManager: _SingleReferenceInput
  isUnplanned: Boolean!
  endDate: _Date
  projectSum: BigDecimal
  name: String!
  id: ID!
  startDate: _Date!
}

input _CreateProjectTableInput {
  periodKind: _EN_PeriodKind!
  endDate: _Date
  statusForB: _StatusInput
  project: _SingleReferenceInput!
  id: ID!
  startDate: _Date!
}

input _CreateProjectWorkPlanInput {
  val: BigDecimal!
  period: String!
  projectTable: ID!
  comment: String
  jobType: ID!
}

scalar _Date

scalar _DateTime

input _DeleteManyDepartInput {
  id: ID!
  compare: _CompareDepartInput
}

input _DeleteManyDepartTableInput {
  id: ID!
  compare: _CompareDepartTableInput
}

input _DeleteManyDepartWorkPlanInput {
  id: ID!
  compare: _CompareDepartWorkPlanInput
}

input _DeleteManyEmployeeInput {
  id: ID!
  compare: _CompareEmployeeInput
}

input _DeleteManyEmployeePositionInput {
  id: ID!
  compare: _CompareEmployeePositionInput
}

input _DeleteManyEmployeeTableInput {
  id: ID!
  compare: _CompareEmployeeTableInput
}

input _DeleteManyEmployeeWorkFactInput {
  id: ID!
  compare: _CompareEmployeeWorkFactInput
}

input _DeleteManyPersonInput {
  id: ID!
  compare: _ComparePersonInput
}

input _DeleteManyProjectInput {
  id: ID!
  compare: _CompareProjectInput
}

input _DeleteManyProjectTableInput {
  id: ID!
  compare: _CompareProjectTableInput
}

input _DeleteManyProjectWorkPlanInput {
  id: ID!
  compare: _CompareProjectWorkPlanInput
}

enum _DependsOnDependencyByGet {
  # EXISTS
  EXISTS

  # NOT_EXISTS
  NOT_EXISTS
}

enum _DependsOnDependencyByUpdateOrCreate {
  # CREATED
  CREATED

  # NOT_CREATED
  NOT_CREATED
}

type _DictionaryPacket {
  getJobTitleType(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobTitleType
  updateOrCreateJobTitleType(
    input: _CreateJobTitleTypeInput!
    exist: _ExistJobTitleTypeInput
  ): _UpdateOrCreateJobTitleTypeResponse
  getJobType(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobType
  updateOrCreateJobType(
    input: _CreateJobTypeInput!
    exist: _ExistJobTypeInput
  ): _UpdateOrCreateJobTypeResponse
  getJobTitle(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobTitle
  updateOrCreateJobTitle(
    input: _CreateJobTitleInput!
    exist: _ExistJobTitleInput
  ): _UpdateOrCreateJobTitleResponse
  updateOrCreateManyJobTitleType(
    input: [_UpdateOrCreateManyJobTitleTypeInput]!
  ): [_UpdateOrCreateManyResponse]
  updateOrCreateManyJobType(
    input: [_UpdateOrCreateManyJobTypeInput]!
  ): [_UpdateOrCreateManyResponse]
  updateOrCreateManyJobTitle(
    input: [_UpdateOrCreateManyJobTitleInput]!
  ): [_UpdateOrCreateManyResponse]
}

type _EC_Depart {
  elems: [Depart!]!
  count: Int!
}

type _EC_DepartTable {
  elems: [DepartTable!]!
  count: Int!
}

type _EC_DepartWorkPlan {
  elems: [DepartWorkPlan!]!
  count: Int!
}

type _EC_Employee {
  elems: [Employee!]!
  count: Int!
}

type _EC_EmployeePosition {
  elems: [EmployeePosition!]!
  count: Int!
}

type _EC_EmployeeTable {
  elems: [EmployeeTable!]!
  count: Int!
}

type _EC_EmployeeWorkFact {
  elems: [EmployeeWorkFact!]!
  count: Int!
}

type _EC_JobTitle {
  elems: [JobTitle!]!
  count: Int!
}

type _EC_JobTitleType {
  elems: [JobTitleType!]!
  count: Int!
}

type _EC_JobType {
  elems: [JobType!]!
  count: Int!
}

type _EC_Person {
  elems: [Person!]!
  count: Int!
}

type _EC_Project {
  elems: [Project!]!
  count: Int!
}

type _EC_ProjectTable {
  elems: [ProjectTable!]!
  count: Int!
}

type _EC_ProjectWorkPlan {
  elems: [ProjectWorkPlan!]!
  count: Int!
}

type _EC_RootDictionary {
  elems: [RootDictionary!]!
  count: Int!
}

type _EC_Stakeholder {
  elems: [Stakeholder!]!
  count: Int!
}

type _EC_Status {
  elems: [Status!]!
  count: Int!
}

type _EC_StatusGraph {
  elems: [StatusGraph!]!
  count: Int!
}

type _EC_SysAdminSettings {
  elems: [SysAdminSettings!]!
  count: Int!
}

type _EC_SysCheckSelect {
  elems: [SysCheckSelect!]!
  count: Int!
}

type _EC_SysOperation {
  elems: [SysOperation!]!
  count: Int!
}

type _EC_SysParamAddition {
  elems: [SysParamAddition!]!
  count: Int!
}

type _EC_SysRootSecurity {
  elems: [SysRootSecurity!]!
  count: Int!
}

type _ENC_PeriodKind {
  elems: [_EN_PeriodKind!]!
  count: Int!
}

enum _EN_PeriodKind {
  DAY
  MONTH
  QUARTER
  WEEK
  YEAR
}

type _E_Depart implements _Entity & Depart {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  description: String
  name: String!
  type: String!
  currentManager: _G_EmployeeReference!
  parent: _G_DepartReference!
  _calc: _Calculation!
}

type _E_DepartTable implements _Entity & DepartTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  statusReasonForB: String
  type: String!
  statusForB(alias: String): Status
  departWorkPlanList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_DepartWorkPlan!
  depart: _G_DepartReference!
  _calc: _Calculation!
}

type _E_DepartWorkPlan implements _Entity & DepartWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  departTable(alias: String): DepartTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): DepartTable
  employee: _G_EmployeeReference!
  project: _G_ProjectReference!
  _calc: _Calculation!
}

type _E_Employee implements _Entity & Employee {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  currentBasicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  currentJobTitle(alias: String): JobTitle
  employeePositionList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeePosition!
  currentDepart: _G_DepartReference!
  person: _G_PersonReference!
  _calc: _Calculation!
}

type _E_EmployeePosition implements _Entity & EmployeePosition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  basicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  employee(alias: String): Employee!
  jobTitle(alias: String): JobTitle!
  aggregateRoot(alias: String): Employee
  depart: _G_DepartReference!
  _calc: _Calculation!
}

type _E_EmployeeTable implements _Entity & EmployeeTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  type: String!
  employeeWorkFactList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeeWorkFact!
  employee: _G_EmployeeReference!
  _calc: _Calculation!
}

type _E_EmployeeWorkFact implements _Entity & EmployeeWorkFact {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  employeeTable(alias: String): EmployeeTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): EmployeeTable
  project: _G_ProjectReference!
  _calc: _Calculation!
}

type _E_JobTitle implements _Entity & JobTitle {
  id: ID!
  isDel: Boolean
  descr: String
  type: String!
  aggregateRoot(alias: String): RootDictionary
  jobTitleTypeList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_JobTitleType!
  _calc: _Calculation!
}

type _E_JobTitleType implements _Entity & JobTitleType {
  id: ID!
  type: String!
  jobTitle(alias: String): JobTitle
  jobType(alias: String): JobType
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

type _E_JobType implements _Entity & JobType {
  id: ID!
  isDel: Boolean
  basicSum: BigDecimal
  isUnplanned: Boolean!
  name: String!
  type: String!
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

type _E_Person implements _Entity & Person {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  birthDate: _Date
  firstName: String!
  lastName: String!
  name: String
  patronymic: String
  type: String!
  _calc: _Calculation!
}

type _E_Project implements _Entity & Project {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  isUnplanned: Boolean!
  name: String!
  projectSum: BigDecimal
  startDate: _Date!
  type: String!
  currentManager: _G_EmployeeReference!
  _calc: _Calculation!
}

type _E_ProjectTable implements _Entity & ProjectTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind!
  startDate: _Date!
  statusReasonForB: String
  type: String!
  statusForB(alias: String): Status
  projectWorkPlanList(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_ProjectWorkPlan!
  project: _G_ProjectReference!
  _calc: _Calculation!
}

type _E_ProjectWorkPlan implements _Entity & ProjectWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  projectTable(alias: String): ProjectTable!
  jobType(alias: String): JobType!
  aggregateRoot(alias: String): ProjectTable
  _calc: _Calculation!
}

type _E_RootDictionary implements _Entity & RootDictionary {
  id: ID!
  type: String!
  _calc: _Calculation!
}

type _E_Stakeholder implements _Entity & Stakeholder {
  id: ID!
  chgCnt: Long
  code: String
  lastChangeDate: _DateTime
  name: String
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

type _E_Status implements _Entity & Status {
  id: ID!
  chgCnt: Long
  code: String
  description: String
  initial: Boolean
  lastChangeDate: _DateTime
  name: String
  statusType: String
  stakeholder(alias: String): Stakeholder
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

type _E_StatusGraph implements _Entity & StatusGraph {
  id: ID!
  chgCnt: Long
  code: String
  label: String
  lastChangeDate: _DateTime
  name: String
  statusFrom(alias: String): Status
  statusTo(alias: String): Status
  aggregateRoot(alias: String): RootDictionary
  _calc: _Calculation!
}

type _E_SysAdminSettings implements _Entity & SysAdminSettings {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  key: String
  value: String
  rootSecurity(alias: String): SysRootSecurity!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

type _E_SysCheckSelect implements _Entity & SysCheckSelect {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  beforeCommitEnable: Boolean
  beforeOperationDisable: Boolean
  conditionValue: String
  description: String
  orderValue: Int
  typeName: String
  operation(alias: String): SysOperation!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

type _E_SysOperation implements _Entity & SysOperation {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  allowEmptyChecks: Boolean
  body: String
  disableJwtVerification: Boolean
  hashValue: String
  rootSecurity(alias: String): SysRootSecurity!
  aggregateRoot(alias: String): SysRootSecurity
  checkSelects(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysCheckSelect!
  paramAdditions(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysParamAddition!
  _calc: _Calculation!
}

type _E_SysParamAddition implements _Entity & SysParamAddition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  paramAddition: String
  paramName: String
  operation(alias: String): SysOperation!
  aggregateRoot(alias: String): SysRootSecurity
  _calc: _Calculation!
}

type _E_SysRootSecurity implements _Entity & SysRootSecurity {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  adminSettings(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysAdminSettings!
  operations(
    elemAlias: String
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysOperation!
  _calc: _Calculation!
}

interface _Entity {
  id: ID!
}

input _ExistDepartInput {
  update: _ExistUpdateDepartInput
  compare: _CompareDepartInput
}

input _ExistDepartTableInput {
  update: _ExistUpdateDepartTableInput
  compare: _CompareDepartTableInput
}

input _ExistDepartWorkPlanInput {
  byKey: _KeyDepartWorkPlan!
  update: _ExistUpdateDepartWorkPlanInput
  inc: _IncDepartWorkPlanInput
  compare: _CompareDepartWorkPlanInput
}

input _ExistEmployeeInput {
  update: _ExistUpdateEmployeeInput
  inc: _IncEmployeeInput
  compare: _CompareEmployeeInput
}

input _ExistEmployeeTableInput {
  update: _ExistUpdateEmployeeTableInput
  compare: _CompareEmployeeTableInput
}

input _ExistEmployeeWorkFactInput {
  byKey: _KeyEmployeeWorkFact!
  update: _ExistUpdateEmployeeWorkFactInput
  inc: _IncEmployeeWorkFactInput
  compare: _CompareEmployeeWorkFactInput
}

input _ExistJobTitleInput {
  update: _ExistUpdateJobTitleInput
  compare: _CompareJobTitleInput
}

input _ExistJobTitleTypeInput {
  update: _ExistUpdateJobTitleTypeInput
}

input _ExistJobTypeInput {
  update: _ExistUpdateJobTypeInput
  inc: _IncJobTypeInput
  compare: _CompareJobTypeInput
}

input _ExistPersonInput {
  update: _ExistUpdatePersonInput
  compare: _ComparePersonInput
}

input _ExistProjectInput {
  update: _ExistUpdateProjectInput
  inc: _IncProjectInput
  compare: _CompareProjectInput
}

input _ExistProjectTableInput {
  update: _ExistUpdateProjectTableInput
  compare: _CompareProjectTableInput
}

input _ExistProjectWorkPlanInput {
  byKey: _KeyProjectWorkPlan!
  update: _ExistUpdateProjectWorkPlanInput
  inc: _IncProjectWorkPlanInput
  compare: _CompareProjectWorkPlanInput
}

input _ExistUpdateDepartInput {
  currentManager: _SingleReferenceInput
  parent: _SingleReferenceInput
  name: String
  description: String
}

input _ExistUpdateDepartTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: _StatusInput
  depart: _SingleReferenceInput
  startDate: _Date
}

input _ExistUpdateDepartWorkPlanInput {
  val: BigDecimal
  period: String
  project: _SingleReferenceInput
  comment: String
  jobType: ID
  employee: _SingleReferenceInput
  departTable: ID
}

input _ExistUpdateEmployeeInput {
  currentBasicSum: BigDecimal
  currentDepart: _SingleReferenceInput
  endDate: _Date
  person: _SingleReferenceInput
  currentJobTitle: ID
  startDate: _Date
}

input _ExistUpdateEmployeeTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  employee: _SingleReferenceInput
  startDate: _Date
}

input _ExistUpdateEmployeeWorkFactInput {
  val: BigDecimal
  period: String
  employeeTable: ID
  project: _SingleReferenceInput
  comment: String
  jobType: ID
}

input _ExistUpdateJobTitleInput {
  descr: String
  isDel: Boolean
}

input _ExistUpdateJobTitleTypeInput {
  jobTitle: ID
  jobType: ID
}

input _ExistUpdateJobTypeInput {
  isUnplanned: Boolean
  name: String
  isDel: Boolean
  basicSum: BigDecimal
}

input _ExistUpdatePersonInput {
  firstName: String
  lastName: String
  patronymic: String
  birthDate: _Date
}

input _ExistUpdateProjectInput {
  currentManager: _SingleReferenceInput
  isUnplanned: Boolean
  endDate: _Date
  projectSum: BigDecimal
  name: String
  startDate: _Date
}

input _ExistUpdateProjectTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: _StatusInput
  project: _SingleReferenceInput
  startDate: _Date
}

input _ExistUpdateProjectWorkPlanInput {
  val: BigDecimal
  period: String
  projectTable: ID
  comment: String
  jobType: ID
}

scalar _Float4

type _G_DepartReference {
  entityId: String
  entity(alias: String): Depart
}

type _G_EmployeeReference {
  entityId: String
  entity(alias: String): Employee
}

type _G_PersonReference {
  entityId: String
  entity(alias: String): Person
}

type _G_ProjectReference {
  entityId: String
  entity(alias: String): Project
}

enum _GetLockMode {
  # NOT_USE
  NOT_USE

  # WAIT
  WAIT

  # NOWAIT
  NOWAIT
}

input _IncBigDecimalValueFailInput {
  operator: _IncFailOperator!
  value: BigDecimal!
}

input _IncBigDecimalValueInput {
  value: BigDecimal!
  negative: Boolean = null
  fail: _IncBigDecimalValueFailInput
}

input _IncDepartWorkPlanInput {
  val: _IncBigDecimalValueInput
}

input _IncEmployeeInput {
  currentBasicSum: _IncBigDecimalValueInput
}

input _IncEmployeePositionInput {
  basicSum: _IncBigDecimalValueInput
}

input _IncEmployeeWorkFactInput {
  val: _IncBigDecimalValueInput
}

enum _IncFailOperator {
  # lt
  lt

  # le
  le

  # gt
  gt

  # ge
  ge
}

input _IncJobTypeInput {
  basicSum: _IncBigDecimalValueInput
}

input _IncProjectInput {
  projectSum: _IncBigDecimalValueInput
}

input _IncProjectWorkPlanInput {
  val: _IncBigDecimalValueInput
}

enum _KeyDepartWorkPlan {
  # departTable_period_jobType_project__entityId_employee__entityId
  departTable_period_jobType_project__entityId_employee__entityId
}

enum _KeyEmployeeWorkFact {
  # employeeTable_period_jobType_project__entityId
  employeeTable_period_jobType_project__entityId
}

enum _KeyProjectWorkPlan {
  # projectTable_period_jobType
  projectTable_period_jobType
}

type _MergedEntitiesCollection {
  elems: [_Entity!]!
  count: Int!
}

type _Mutation {
  packet(
    aggregateVersion: Long
    idempotencePacketId: String
    enableBuffering: Boolean
  ): _Packet
  dictionaryPacket: _DictionaryPacket
}

scalar _OffsetDateTime

type _Packet {
  getStatus(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Status
  createEmployeePosition(input: _CreateEmployeePositionInput!): EmployeePosition
  updateEmployeePosition(
    input: _UpdateEmployeePositionInput!
    compare: _CompareEmployeePositionInput
    inc: _IncEmployeePositionInput
  ): EmployeePosition
  getEmployeePosition(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): EmployeePosition
  deleteEmployeePosition(
    id: ID!
    compare: _CompareEmployeePositionInput
  ): String
  createEmployeeWorkFact(input: _CreateEmployeeWorkFactInput!): EmployeeWorkFact
  updateOrCreateEmployeeWorkFact(
    input: _CreateEmployeeWorkFactInput!
    exist: _ExistEmployeeWorkFactInput!
  ): _UpdateOrCreateEmployeeWorkFactResponse
  updateEmployeeWorkFact(
    input: _UpdateEmployeeWorkFactInput!
    compare: _CompareEmployeeWorkFactInput
    inc: _IncEmployeeWorkFactInput
  ): EmployeeWorkFact
  getEmployeeWorkFact(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): EmployeeWorkFact
  deleteEmployeeWorkFact(
    id: ID!
    compare: _CompareEmployeeWorkFactInput
  ): String
  getStatusGraph(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): StatusGraph
  getJobTitle(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobTitle
  createDepartWorkPlan(input: _CreateDepartWorkPlanInput!): DepartWorkPlan
  updateOrCreateDepartWorkPlan(
    input: _CreateDepartWorkPlanInput!
    exist: _ExistDepartWorkPlanInput!
  ): _UpdateOrCreateDepartWorkPlanResponse
  updateDepartWorkPlan(
    input: _UpdateDepartWorkPlanInput!
    compare: _CompareDepartWorkPlanInput
    inc: _IncDepartWorkPlanInput
  ): DepartWorkPlan
  getDepartWorkPlan(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): DepartWorkPlan
  deleteDepartWorkPlan(id: ID!, compare: _CompareDepartWorkPlanInput): String
  getJobTitleType(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobTitleType
  createProjectWorkPlan(input: _CreateProjectWorkPlanInput!): ProjectWorkPlan
  updateOrCreateProjectWorkPlan(
    input: _CreateProjectWorkPlanInput!
    exist: _ExistProjectWorkPlanInput!
  ): _UpdateOrCreateProjectWorkPlanResponse
  updateProjectWorkPlan(
    input: _UpdateProjectWorkPlanInput!
    compare: _CompareProjectWorkPlanInput
    inc: _IncProjectWorkPlanInput
  ): ProjectWorkPlan
  getProjectWorkPlan(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): ProjectWorkPlan
  deleteProjectWorkPlan(id: ID!, compare: _CompareProjectWorkPlanInput): String
  createProject(input: _CreateProjectInput!): Project
  updateOrCreateProject(
    input: _CreateProjectInput!
    exist: _ExistProjectInput
  ): _UpdateOrCreateProjectResponse
  updateProject(
    input: _UpdateProjectInput!
    compare: _CompareProjectInput
    inc: _IncProjectInput
  ): Project
  getProject(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Project
  deleteProject(id: ID!, compare: _CompareProjectInput): String
  createEmployee(input: _CreateEmployeeInput!): Employee
  updateOrCreateEmployee(
    input: _CreateEmployeeInput!
    exist: _ExistEmployeeInput
  ): _UpdateOrCreateEmployeeResponse
  updateEmployee(
    input: _UpdateEmployeeInput!
    compare: _CompareEmployeeInput
    inc: _IncEmployeeInput
  ): Employee
  getEmployee(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Employee
  deleteEmployee(id: ID!, compare: _CompareEmployeeInput): String
  getJobType(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): JobType
  getStakeholder(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Stakeholder
  createEmployeeTable(input: _CreateEmployeeTableInput!): EmployeeTable
  updateOrCreateEmployeeTable(
    input: _CreateEmployeeTableInput!
    exist: _ExistEmployeeTableInput
  ): _UpdateOrCreateEmployeeTableResponse
  updateEmployeeTable(
    input: _UpdateEmployeeTableInput!
    compare: _CompareEmployeeTableInput
  ): EmployeeTable
  getEmployeeTable(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): EmployeeTable
  deleteEmployeeTable(id: ID!, compare: _CompareEmployeeTableInput): String
  createDepart(input: _CreateDepartInput!): Depart
  updateOrCreateDepart(
    input: _CreateDepartInput!
    exist: _ExistDepartInput
  ): _UpdateOrCreateDepartResponse
  updateDepart(input: _UpdateDepartInput!, compare: _CompareDepartInput): Depart
  getDepart(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Depart
  deleteDepart(id: ID!, compare: _CompareDepartInput): String
  createDepartTable(input: _CreateDepartTableInput!): DepartTable
  updateOrCreateDepartTable(
    input: _CreateDepartTableInput!
    exist: _ExistDepartTableInput
  ): _UpdateOrCreateDepartTableResponse
  updateDepartTable(
    input: _UpdateDepartTableInput!
    compare: _CompareDepartTableInput
  ): DepartTable
  getDepartTable(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): DepartTable
  deleteDepartTable(id: ID!, compare: _CompareDepartTableInput): String
  createPerson(input: _CreatePersonInput!): Person
  updateOrCreatePerson(
    input: _CreatePersonInput!
    exist: _ExistPersonInput
  ): _UpdateOrCreatePersonResponse
  updatePerson(input: _UpdatePersonInput!, compare: _ComparePersonInput): Person
  getPerson(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): Person
  deletePerson(id: ID!, compare: _ComparePersonInput): String
  createProjectTable(input: _CreateProjectTableInput!): ProjectTable
  updateOrCreateProjectTable(
    input: _CreateProjectTableInput!
    exist: _ExistProjectTableInput
  ): _UpdateOrCreateProjectTableResponse
  updateProjectTable(
    input: _UpdateProjectTableInput!
    compare: _CompareProjectTableInput
  ): ProjectTable
  getProjectTable(
    id: ID!
    failOnEmpty: Boolean = null
    lock: _GetLockMode = NOT_USE
  ): ProjectTable
  deleteProjectTable(id: ID!, compare: _CompareProjectTableInput): String
  aggregateVersion: Long
  isIdempotenceResponse: Boolean
  createManyEmployeePosition(input: [_CreateEmployeePositionInput!]!): [String]
  updateManyEmployeePosition(input: [_UpdateManyEmployeePositionInput]!): String
  deleteManyEmployeePosition(input: [_DeleteManyEmployeePositionInput]!): String
  createManyEmployeeWorkFact(input: [_CreateEmployeeWorkFactInput!]!): [String]
  updateOrCreateManyEmployeeWorkFact(
    input: [_UpdateOrCreateManyEmployeeWorkFactInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyEmployeeWorkFact(input: [_UpdateManyEmployeeWorkFactInput]!): String
  deleteManyEmployeeWorkFact(input: [_DeleteManyEmployeeWorkFactInput]!): String
  createManyDepartWorkPlan(input: [_CreateDepartWorkPlanInput!]!): [String]
  updateOrCreateManyDepartWorkPlan(
    input: [_UpdateOrCreateManyDepartWorkPlanInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyDepartWorkPlan(input: [_UpdateManyDepartWorkPlanInput]!): String
  deleteManyDepartWorkPlan(input: [_DeleteManyDepartWorkPlanInput]!): String
  createManyProjectWorkPlan(input: [_CreateProjectWorkPlanInput!]!): [String]
  updateOrCreateManyProjectWorkPlan(
    input: [_UpdateOrCreateManyProjectWorkPlanInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyProjectWorkPlan(input: [_UpdateManyProjectWorkPlanInput]!): String
  deleteManyProjectWorkPlan(input: [_DeleteManyProjectWorkPlanInput]!): String
  createManyProject(input: [_CreateProjectInput!]!): [String]
  updateOrCreateManyProject(
    input: [_UpdateOrCreateManyProjectInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyProject(input: [_UpdateManyProjectInput]!): String
  deleteManyProject(input: [_DeleteManyProjectInput]!): String
  createManyEmployee(input: [_CreateEmployeeInput!]!): [String]
  updateOrCreateManyEmployee(
    input: [_UpdateOrCreateManyEmployeeInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyEmployee(input: [_UpdateManyEmployeeInput]!): String
  deleteManyEmployee(input: [_DeleteManyEmployeeInput]!): String
  createManyEmployeeTable(input: [_CreateEmployeeTableInput!]!): [String]
  updateOrCreateManyEmployeeTable(
    input: [_UpdateOrCreateManyEmployeeTableInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyEmployeeTable(input: [_UpdateManyEmployeeTableInput]!): String
  deleteManyEmployeeTable(input: [_DeleteManyEmployeeTableInput]!): String
  createManyDepart(input: [_CreateDepartInput!]!): [String]
  updateOrCreateManyDepart(
    input: [_UpdateOrCreateManyDepartInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyDepart(input: [_UpdateManyDepartInput]!): String
  deleteManyDepart(input: [_DeleteManyDepartInput]!): String
  createManyDepartTable(input: [_CreateDepartTableInput!]!): [String]
  updateOrCreateManyDepartTable(
    input: [_UpdateOrCreateManyDepartTableInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyDepartTable(input: [_UpdateManyDepartTableInput]!): String
  deleteManyDepartTable(input: [_DeleteManyDepartTableInput]!): String
  createManyPerson(input: [_CreatePersonInput!]!): [String]
  updateOrCreateManyPerson(
    input: [_UpdateOrCreateManyPersonInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyPerson(input: [_UpdateManyPersonInput]!): String
  deleteManyPerson(input: [_DeleteManyPersonInput]!): String
  createManyProjectTable(input: [_CreateProjectTableInput!]!): [String]
  updateOrCreateManyProjectTable(
    input: [_UpdateOrCreateManyProjectTableInput]!
  ): [_UpdateOrCreateManyResponse]
  updateManyProjectTable(input: [_UpdateManyProjectTableInput]!): String
  deleteManyProjectTable(input: [_DeleteManyProjectTableInput]!): String
}

type _Query {
  merge(
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _MergedEntitiesCollection!
  resolveReferences(referenceType: String!, ids: [ID!]!): [_Reference!]!
  selectionByDepart(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Depart!
  selectionByDepartTable(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_DepartTable!
  selectionByDepartWorkPlan(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_DepartWorkPlan!
  selectionByEmployee(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Employee!
  selectionByEmployeePosition(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_EmployeePosition!
  selectionByEmployeeTable(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_EmployeeTable!
  selectionByEmployeeWorkFact(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_EmployeeWorkFact!
  selectionByJobTitle(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_JobTitle!
  selectionByJobTitleType(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_JobTitleType!
  selectionByJobType(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_JobType!
  selectionByPerson(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Person!
  selectionByProject(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Project!
  selectionByProjectTable(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_ProjectTable!
  selectionByProjectWorkPlan(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_ProjectWorkPlan!
  selectionByStakeholder(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Stakeholder!
  selectionByStatus(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_Status!
  selectionByStatusGraph(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_StatusGraph!
  selectionByRootDictionary(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_RootDictionary!
  selectionBySysRootSecurity(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_SysRootSecurity!
  selectionBySysAdminSettings(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_SysAdminSettings!
  selectionBySysOperation(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_SysOperation!
  selectionBySysCheckSelect(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_SysCheckSelect!
  selectionBySysParamAddition(
    cond: String
    group: [String!]
    groupCond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
    distinct: Boolean
  ): _SEC_SysParamAddition!
  searchDepart(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Depart!
  searchDepartTable(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_DepartTable!
  searchDepartWorkPlan(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_DepartWorkPlan!
  searchEmployee(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Employee!
  searchEmployeePosition(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeePosition!
  searchEmployeeTable(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeeTable!
  searchEmployeeWorkFact(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_EmployeeWorkFact!
  searchJobTitle(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_JobTitle!
  searchJobTitleType(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_JobTitleType!
  searchJobType(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_JobType!
  searchPerson(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Person!
  searchProject(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Project!
  searchProjectTable(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_ProjectTable!
  searchProjectWorkPlan(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_ProjectWorkPlan!
  searchStakeholder(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Stakeholder!
  searchStatus(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_Status!
  searchStatusGraph(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_StatusGraph!
  searchRootDictionary(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_RootDictionary!
  searchSysRootSecurity(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysRootSecurity!
  searchSysAdminSettings(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysAdminSettings!
  searchSysOperation(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysOperation!
  searchSysCheckSelect(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysCheckSelect!
  searchSysParamAddition(
    cond: String
    limit: Int
    offset: Int
    sort: [_SortCriterionSpecification!]
  ): _EC_SysParamAddition!
}

type _R_Depart implements _Reference {
  entityId: String
  entity: Depart
}

type _R_DepartTable implements _Reference {
  entityId: String
  entity: DepartTable
}

type _R_DepartWorkPlan implements _Reference {
  entityId: String
  entity: DepartWorkPlan
}

type _R_Employee implements _Reference {
  entityId: String
  entity: Employee
}

type _R_EmployeePosition implements _Reference {
  entityId: String
  entity: EmployeePosition
}

type _R_EmployeeTable implements _Reference {
  entityId: String
  entity: EmployeeTable
}

type _R_EmployeeWorkFact implements _Reference {
  entityId: String
  entity: EmployeeWorkFact
}

type _R_JobTitle implements _Reference {
  entityId: String
  entity: JobTitle
}

type _R_JobTitleType implements _Reference {
  entityId: String
  entity: JobTitleType
}

type _R_JobType implements _Reference {
  entityId: String
  entity: JobType
}

type _R_Person implements _Reference {
  entityId: String
  entity: Person
}

type _R_Project implements _Reference {
  entityId: String
  entity: Project
}

type _R_ProjectTable implements _Reference {
  entityId: String
  entity: ProjectTable
}

type _R_ProjectWorkPlan implements _Reference {
  entityId: String
  entity: ProjectWorkPlan
}

type _R_RootDictionary implements _Reference {
  entityId: String
  entity: RootDictionary
}

type _R_Stakeholder implements _Reference {
  entityId: String
  entity: Stakeholder
}

type _R_Status implements _Reference {
  entityId: String
  entity: Status
}

type _R_StatusGraph implements _Reference {
  entityId: String
  entity: StatusGraph
}

type _R_SysAdminSettings implements _Reference {
  entityId: String
  entity: SysAdminSettings
}

type _R_SysCheckSelect implements _Reference {
  entityId: String
  entity: SysCheckSelect
}

type _R_SysOperation implements _Reference {
  entityId: String
  entity: SysOperation
}

type _R_SysParamAddition implements _Reference {
  entityId: String
  entity: SysParamAddition
}

type _R_SysRootSecurity implements _Reference {
  entityId: String
  entity: SysRootSecurity
}

interface _Reference {
  entityId: String
}

type _SEC_Depart {
  elems: [_SE_Depart!]!
  count: Int!
}

type _SEC_DepartTable {
  elems: [_SE_DepartTable!]!
  count: Int!
}

type _SEC_DepartWorkPlan {
  elems: [_SE_DepartWorkPlan!]!
  count: Int!
}

type _SEC_Employee {
  elems: [_SE_Employee!]!
  count: Int!
}

type _SEC_EmployeePosition {
  elems: [_SE_EmployeePosition!]!
  count: Int!
}

type _SEC_EmployeeTable {
  elems: [_SE_EmployeeTable!]!
  count: Int!
}

type _SEC_EmployeeWorkFact {
  elems: [_SE_EmployeeWorkFact!]!
  count: Int!
}

type _SEC_JobTitle {
  elems: [_SE_JobTitle!]!
  count: Int!
}

type _SEC_JobTitleType {
  elems: [_SE_JobTitleType!]!
  count: Int!
}

type _SEC_JobType {
  elems: [_SE_JobType!]!
  count: Int!
}

type _SEC_Person {
  elems: [_SE_Person!]!
  count: Int!
}

type _SEC_Project {
  elems: [_SE_Project!]!
  count: Int!
}

type _SEC_ProjectTable {
  elems: [_SE_ProjectTable!]!
  count: Int!
}

type _SEC_ProjectWorkPlan {
  elems: [_SE_ProjectWorkPlan!]!
  count: Int!
}

type _SEC_RootDictionary {
  elems: [_SE_RootDictionary!]!
  count: Int!
}

type _SEC_Stakeholder {
  elems: [_SE_Stakeholder!]!
  count: Int!
}

type _SEC_Status {
  elems: [_SE_Status!]!
  count: Int!
}

type _SEC_StatusGraph {
  elems: [_SE_StatusGraph!]!
  count: Int!
}

type _SEC_SysAdminSettings {
  elems: [_SE_SysAdminSettings!]!
  count: Int!
}

type _SEC_SysCheckSelect {
  elems: [_SE_SysCheckSelect!]!
  count: Int!
}

type _SEC_SysOperation {
  elems: [_SE_SysOperation!]!
  count: Int!
}

type _SEC_SysParamAddition {
  elems: [_SE_SysParamAddition!]!
  count: Int!
}

type _SEC_SysRootSecurity {
  elems: [_SE_SysRootSecurity!]!
  count: Int!
}

type _SE_Depart {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  description: String
  name: String!
  type: String!
  _calc: _Calculation!
}

type _SE_DepartTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind
  startDate: _Date!
  statusReasonForB: String
  type: String!
  _calc: _Calculation!
}

type _SE_DepartWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  _calc: _Calculation!
}

type _SE_Employee {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  currentBasicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  _calc: _Calculation!
}

type _SE_EmployeePosition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  basicSum: BigDecimal!
  endDate: _Date
  startDate: _Date!
  type: String!
  _calc: _Calculation!
}

type _SE_EmployeeTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind
  startDate: _Date!
  type: String!
  _calc: _Calculation!
}

type _SE_EmployeeWorkFact {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  _calc: _Calculation!
}

type _SE_JobTitle {
  id: ID!
  aggVersion: Long!
  isDel: Boolean
  descr: String
  type: String!
  _calc: _Calculation!
}

type _SE_JobTitleType {
  id: ID!
  aggVersion: Long!
  type: String!
  _calc: _Calculation!
}

type _SE_JobType {
  id: ID!
  aggVersion: Long!
  isDel: Boolean
  basicSum: BigDecimal
  isUnplanned: Boolean!
  name: String!
  type: String!
  _calc: _Calculation!
}

type _SE_Person {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  birthDate: _Date
  firstName: String!
  lastName: String!
  name: String
  patronymic: String
  type: String!
  _calc: _Calculation!
}

type _SE_Project {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  isUnplanned: Boolean!
  name: String!
  projectSum: BigDecimal
  startDate: _Date!
  type: String!
  _calc: _Calculation!
}

type _SE_ProjectTable {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  endDate: _Date
  periodKind: _EN_PeriodKind
  startDate: _Date!
  statusReasonForB: String
  type: String!
  _calc: _Calculation!
}

type _SE_ProjectWorkPlan {
  id: ID!
  aggVersion: Long!
  comment: String
  period: String!
  val: BigDecimal!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  _calc: _Calculation!
}

type _SE_RootDictionary {
  id: ID!
  aggVersion: Long!
  type: String!
  _calc: _Calculation!
}

type _SE_Stakeholder {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  code: String
  lastChangeDate: _DateTime
  name: String
  _calc: _Calculation!
}

type _SE_Status {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  code: String
  description: String
  initial: Boolean
  lastChangeDate: _DateTime
  name: String
  statusType: String
  _calc: _Calculation!
}

type _SE_StatusGraph {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  code: String
  label: String
  lastChangeDate: _DateTime
  name: String
  _calc: _Calculation!
}

type _SE_SysAdminSettings {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  key: String
  value: String
  _calc: _Calculation!
}

type _SE_SysCheckSelect {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  beforeCommitEnable: Boolean
  beforeOperationDisable: Boolean
  conditionValue: String
  description: String
  orderValue: Int
  typeName: String
  _calc: _Calculation!
}

type _SE_SysOperation {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  allowEmptyChecks: Boolean
  body: String
  disableJwtVerification: Boolean
  hashValue: String
  _calc: _Calculation!
}

type _SE_SysParamAddition {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  paramAddition: String
  paramName: String
  _calc: _Calculation!
}

type _SE_SysRootSecurity {
  id: ID!
  aggVersion: Long!
  chgCnt: Long
  lastChangeDate: _DateTime
  ownerId: String
  type: String!
  _calc: _Calculation!
}

input _SingleReferenceInput {
  entityId: String!
}

input _SortCriterionSpecification {
  crit: String!
  order: _SortOrder! = ASC
  nullsLast: Boolean
}

enum _SortOrder {
  ASC
  DESC
}

input _StatusInput {
  code: String!
  reason: String
}

scalar _Time

input _UpdateDepartInput {
  currentManager: _SingleReferenceInput
  parent: _SingleReferenceInput
  name: String
  description: String
  id: ID!
}

input _UpdateDepartTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: _StatusInput
  depart: _SingleReferenceInput
  startDate: _Date
  id: ID!
}

input _UpdateDepartWorkPlanInput {
  val: BigDecimal
  period: String
  project: _SingleReferenceInput
  comment: String
  jobType: ID
  employee: _SingleReferenceInput
  departTable: ID
  id: ID!
}

input _UpdateEmployeeInput {
  currentBasicSum: BigDecimal
  currentDepart: _SingleReferenceInput
  endDate: _Date
  person: _SingleReferenceInput
  currentJobTitle: ID
  startDate: _Date
  id: ID!
}

input _UpdateEmployeePositionInput {
  endDate: _Date
  jobTitle: ID
  employee: ID
  depart: _SingleReferenceInput
  startDate: _Date
  basicSum: BigDecimal
  id: ID!
}

input _UpdateEmployeeTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  employee: _SingleReferenceInput
  startDate: _Date
  id: ID!
}

input _UpdateEmployeeWorkFactInput {
  val: BigDecimal
  period: String
  employeeTable: ID
  project: _SingleReferenceInput
  comment: String
  jobType: ID
  id: ID!
}

input _UpdateManyDepartInput {
  param: _UpdateDepartInput!
  compare: _CompareDepartInput
}

input _UpdateManyDepartTableInput {
  param: _UpdateDepartTableInput!
  compare: _CompareDepartTableInput
}

input _UpdateManyDepartWorkPlanInput {
  param: _UpdateDepartWorkPlanInput!
  compare: _CompareDepartWorkPlanInput
  inc: _IncDepartWorkPlanInput
}

input _UpdateManyEmployeeInput {
  param: _UpdateEmployeeInput!
  compare: _CompareEmployeeInput
  inc: _IncEmployeeInput
}

input _UpdateManyEmployeePositionInput {
  param: _UpdateEmployeePositionInput!
  compare: _CompareEmployeePositionInput
  inc: _IncEmployeePositionInput
}

input _UpdateManyEmployeeTableInput {
  param: _UpdateEmployeeTableInput!
  compare: _CompareEmployeeTableInput
}

input _UpdateManyEmployeeWorkFactInput {
  param: _UpdateEmployeeWorkFactInput!
  compare: _CompareEmployeeWorkFactInput
  inc: _IncEmployeeWorkFactInput
}

input _UpdateManyPersonInput {
  param: _UpdatePersonInput!
  compare: _ComparePersonInput
}

input _UpdateManyProjectInput {
  param: _UpdateProjectInput!
  compare: _CompareProjectInput
  inc: _IncProjectInput
}

input _UpdateManyProjectTableInput {
  param: _UpdateProjectTableInput!
  compare: _CompareProjectTableInput
}

input _UpdateManyProjectWorkPlanInput {
  param: _UpdateProjectWorkPlanInput!
  compare: _CompareProjectWorkPlanInput
  inc: _IncProjectWorkPlanInput
}

type _UpdateOrCreateDepartResponse {
  created: Boolean
  returning: Depart
}

type _UpdateOrCreateDepartTableResponse {
  created: Boolean
  returning: DepartTable
}

type _UpdateOrCreateDepartWorkPlanResponse {
  created: Boolean
  returning: DepartWorkPlan
}

type _UpdateOrCreateEmployeeResponse {
  created: Boolean
  returning: Employee
}

type _UpdateOrCreateEmployeeTableResponse {
  created: Boolean
  returning: EmployeeTable
}

type _UpdateOrCreateEmployeeWorkFactResponse {
  created: Boolean
  returning: EmployeeWorkFact
}

type _UpdateOrCreateJobTitleResponse {
  created: Boolean
  returning: JobTitle
}

type _UpdateOrCreateJobTitleTypeResponse {
  created: Boolean
  returning: JobTitleType
}

type _UpdateOrCreateJobTypeResponse {
  created: Boolean
  returning: JobType
}

input _UpdateOrCreateManyDepartInput {
  param: _CreateDepartInput!
  exist: _ExistDepartInput
}

input _UpdateOrCreateManyDepartTableInput {
  param: _CreateDepartTableInput!
  exist: _ExistDepartTableInput
}

input _UpdateOrCreateManyDepartWorkPlanInput {
  param: _CreateDepartWorkPlanInput!
  exist: _ExistDepartWorkPlanInput!
}

input _UpdateOrCreateManyEmployeeInput {
  param: _CreateEmployeeInput!
  exist: _ExistEmployeeInput
}

input _UpdateOrCreateManyEmployeeTableInput {
  param: _CreateEmployeeTableInput!
  exist: _ExistEmployeeTableInput
}

input _UpdateOrCreateManyEmployeeWorkFactInput {
  param: _CreateEmployeeWorkFactInput!
  exist: _ExistEmployeeWorkFactInput!
}

input _UpdateOrCreateManyJobTitleInput {
  param: _CreateJobTitleInput!
  exist: _ExistJobTitleInput
}

input _UpdateOrCreateManyJobTitleTypeInput {
  param: _CreateJobTitleTypeInput!
  exist: _ExistJobTitleTypeInput
}

input _UpdateOrCreateManyJobTypeInput {
  param: _CreateJobTypeInput!
  exist: _ExistJobTypeInput
}

input _UpdateOrCreateManyPersonInput {
  param: _CreatePersonInput!
  exist: _ExistPersonInput
}

input _UpdateOrCreateManyProjectInput {
  param: _CreateProjectInput!
  exist: _ExistProjectInput
}

input _UpdateOrCreateManyProjectTableInput {
  param: _CreateProjectTableInput!
  exist: _ExistProjectTableInput
}

input _UpdateOrCreateManyProjectWorkPlanInput {
  param: _CreateProjectWorkPlanInput!
  exist: _ExistProjectWorkPlanInput!
}

type _UpdateOrCreateManyResponse {
  id: ID
  created: Boolean
}

type _UpdateOrCreatePersonResponse {
  created: Boolean
  returning: Person
}

type _UpdateOrCreateProjectResponse {
  created: Boolean
  returning: Project
}

type _UpdateOrCreateProjectTableResponse {
  created: Boolean
  returning: ProjectTable
}

type _UpdateOrCreateProjectWorkPlanResponse {
  created: Boolean
  returning: ProjectWorkPlan
}

input _UpdatePersonInput {
  firstName: String
  lastName: String
  patronymic: String
  birthDate: _Date
  id: ID!
}

input _UpdateProjectInput {
  currentManager: _SingleReferenceInput
  isUnplanned: Boolean
  endDate: _Date
  projectSum: BigDecimal
  name: String
  startDate: _Date
  id: ID!
}

input _UpdateProjectTableInput {
  periodKind: _EN_PeriodKind
  endDate: _Date
  statusForB: _StatusInput
  project: _SingleReferenceInput
  startDate: _Date
  id: ID!
}

input _UpdateProjectWorkPlanInput {
  val: BigDecimal
  period: String
  projectTable: ID
  comment: String
  jobType: ID
  id: ID!
}
